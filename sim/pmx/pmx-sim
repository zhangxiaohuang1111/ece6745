#!/usr/bin/env python
#=========================================================================
# pmx-sim [options] elf-binary elf-binary-options
#=========================================================================
#
# This is the primary simulator we use to drive our processor,
# accelerator, memory compositions. By choosing an FL processor and
# accelerator implementation and no cache we can effectively create an
# ISA simulator, and by choosing RTL implementations we can create an RTL
# simulator and potentially use this simulator to drive the ASIC flow.
#
#  -h --help            Display this message
#
#  --proc-impl          {fl,rtl}
#  --cache-impl         {fl,rtl}
#  --xcel-impl          accelerator implementation (see below)
#  --trace              Display line tracing
#  --stats              Display statistics
#  --translate          Translate RTL model to Verilog
#  --dump-vcd           Dump VCD to pmx-<impl>-<elf-binary>.vcd
#  --dump-vtb           Dump a SystemVerilog test harness
#  --max-cycles         Set timeout num_cycles, default=1000000
#
#  elf-binary           TinyRV2 elf binary file
#  elf-binary-options   Options to be pased to simulated program
#
# Following accelerator implementations are always available:
#
#  - null-fl   : empty accelerator FL model
#  - null-rtl  : empty accelerator RTL model
#
# For tut9_xcel, the following accelerator impls are available:
#
#  - accum-fl  : accumulator accelerator FL model
#  - accum-rtl : accumulator accelerator RTL model
#  - vvadd-fl  : vector-vector add accelerator FL model
#  - vvadd-rtl : vector-vector add accelerator RTL model
#
# For lab2_xcel, the following accelerator impls are available:
#
#  - sort-fl   : sorting accelerator FL model
#  - sort-rtl  : sorting accelerator RTL model
#
# Author : Shunning Jiang, Christopher Batten
# Date   : Feb 28, 2023

# Variables used to make the simulator conditionally work for either
# tut9_xcel and/or lab2_xcel. In our labs repo, we keep both of these
# enabled, but when we release the code for the tutorial and lab we set
# these variables accordingly.

tut9_xcel_enabled = False
lab2_xcel_enabled = True

# Hack to add project root to python path

import os
import sys
import struct

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + "pymtl.ini" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re

from pymtl3 import *

from pymtl3.passes.backends.verilog import *

from pymtl3.stdlib.stream.ifcs  import IStreamIfc, OStreamIfc
from pymtl3.stdlib.stream       import StreamSourceFL, StreamSinkFL
from pymtl3.stdlib.mem          import MemoryFL, mk_mem_msg, MemMsgType
from pymtl3.stdlib.proc         import SparseMemoryImage, elf_reader
from pymtl3.stdlib.test_utils   import config_model_with_cmdline_opts

from proc.tinyrv2_encoding import assemble

from proc.ProcFL     import ProcFL
from proc.Proc       import Proc
from proc.NullXcelFL import NullXcelFL
from proc.NullXcel   import NullXcel

if tut9_xcel_enabled:
  from tut9_xcel.AccumXcelFL import AccumXcelFL
  from tut9_xcel.AccumXcel   import AccumXcel
  from tut9_xcel.VvaddXcelFL import VvaddXcelFL
  from tut9_xcel.VvaddXcel   import VvaddXcel

if lab2_xcel_enabled:
  from lab2_xcel.SortXcelFL  import SortXcelFL
  from lab2_xcel.SortXcel    import SortXcel

from pmx.ProcXcel    import ProcXcel

#=========================================================================
# Command line processing
#=========================================================================

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",          action="store_true"   )

  # Additional commane line arguments for the simulator

  p.add_argument( "--proc-impl",  default="fl",      choices=["fl","rtl"] )
  p.add_argument( "--xcel-impl",  default="null-fl",
      choices=["null-fl","null-rtl","accum-fl","accum-rtl","vvadd-fl","vvadd-rtl","sort-fl","sort-rtl"] )
  p.add_argument( "--trace",      action="store_true"   )
  p.add_argument( "--trace-regs", action="store_true"   )
  p.add_argument( "--stats",      action="store_true"   )
  p.add_argument( "--translate",  action="store_true"   )
  p.add_argument( "--dump-vcd",   action="store_true"   )
  p.add_argument( "--dump-vtb",   action="store_true"   )
  p.add_argument( "--max-cycles", default=1000000, type=int )

  p.add_argument( "elf_file" )

  # We need to figure out which arguments are for the simulator and which
  # arguments are for the simulated program. Note, we cannot juse use
  # parse_known_args alone since bogus arguments before the elf binary
  # would not trigger an error. So we take a two pass approach.

  # First, parse the command line using parse_unused_args so argparse
  # won't complain about the arguments.

  opts,unused = p.parse_known_args()

  # Second, scan through the original argument list, find the elf binary,
  # then collect all remaining arguments so we can load them into the
  # simulated program.

  found_prog = False # set true when found simulated program name
  sim_argv   = []    # arguments for simulator
  prog_argv  = []    # arguments for simulated program

  for arg in sys.argv[1:]:
    if found_prog:
      prog_argv.append(arg)
    elif arg == opts.elf_file:
      sim_argv.append(arg)
      prog_argv.append(arg)
      found_prog = True
    else:
      sim_argv.append(arg)

  # Third, parse the command line again but only passing in the arguments
  # meant for the simulator.

  opts = p.parse_args(sim_argv)

  if opts.help: p.error()
  return opts,prog_argv

#=========================================================================
# Processing Simulated Program Arguments
#=========================================================================
# Takes as input a list of strings representing the arguments we should
# pass to the simulated program and outputs a list of (addr,data) pairs
# suitable for loading into memory. Both the address and data are 4B.
# This is what crt0.S is expecting:
#
#  address
#          -------------------------------------------
#  0xffffc last word in memory
#          -------------------------------------------
#          unusedd until last argument
#          -------------------------------------------
#          arg(argc-1)  : argument argc-1
#          ...
#          arg(1)       : argument 1
#   offset arg(0)       : argument 0
#          -------------------------------------------
#          NULL         : extra null pointer
#          NULL         : end of argument pointers
#          argv[argc-1] : argument pointer argc-1
#          ...
#          argv[1]      : argument pointer 1
#          argv[0]      : argument pointer 0
#  0xff000 argc         : argument count
#          -------------------------------------------

def convert_prog_argv( prog_argv ):

  addr_data = []

  # argc is just the number of program arguments, so let's go ahead and
  # add the corresponding (addr,data) pair

  argc = len(prog_argv)
  addr_data.append(( Bits32(0xff000), Bits32(argc) ))

  # Since we know the number of arguments, we can go ahead and add the
  # two null pointers.

  addr_data.append(( Bits32( 0xff000 + ((argc+1)*4) ), Bits32(0) ))
  addr_data.append(( Bits32( 0xff000 + ((argc+2)*4) ), Bits32(0) ))

  # Figure out the offset shown above. We need one word for argc, one
  # word for the pointer to each argument, and then two words for the
  # NULL pointers. So the offset is (argc+3)*4B

  offset = 0xff000 + ((argc+3)*4)

  # Add the actual argument strings

  for i,arg in enumerate(prog_argv):

    # First set the pointer based on the offset

    addr_data.append(( Bits32( 0xff000 + ((1+i)*4) ), Bits32(offset) ))

    # Add each character in the string, expending the character to 4B

    for c in arg:
      addr_data.append(( Bits32(offset), Bits32(ord(c)) ))
      offset += 4

    # Add final null character

    addr_data.append(( Bits32(offset), Bits32(0) ))
    offset += 4

  # print for debugging

  # for addr,data in sorted(addr_data,reverse=True):
  #   print(addr,data)

  return addr_data

#=========================================================================
# TestHarness
#=========================================================================

class TestHarness( Component ):

  #-----------------------------------------------------------------------
  # constructor
  #-----------------------------------------------------------------------

  def construct( s, Sys ):

    # Interface

    s.proc2mngr     = OStreamIfc( Bits32 )

    s.stats_en      = OutPort()
    s.commit_inst   = OutPort()

    # Instantiate source, system, and memory

    s.src = StreamSourceFL( Bits32, [] )
    s.sys = Sys
    s.mem = MemoryFL(3, mem_ifc_dtypes=3*[mk_mem_msg(8,32,32)] )

    # System <-> Proc/Mngr

    # Note simulator only gets output, so we don't need to worry about
    # the mngr2proc interface. We just hook it up to an empty stream
    # source.

    s.src.ostream //= s.sys.mngr2proc

    # The simulator will monitor the proc2mngr interface at the top level
    # for handling various message types.

    s.proc2mngr //= s.sys.proc2mngr

    # System <-> Memory

    s.sys.imem //= s.mem.ifc[0]
    s.sys.dmem //= s.mem.ifc[1]
    s.sys.xmem //= s.mem.ifc[2]

    # Bring the stats enable up to the top level

    s.stats_en      //= s.sys.stats_en
    s.commit_inst   //= s.sys.commit_inst

  #-----------------------------------------------------------------------
  # load memory image
  #-----------------------------------------------------------------------

  def load( self, mem_image ):
    sections = mem_image.get_sections()
    for section in sections:
      start_addr = section.addr
      stop_addr  = section.addr + len(section.data)
      self.mem.mem.mem[start_addr:stop_addr] = section.data

  #-----------------------------------------------------------------------
  # cleanup
  #-----------------------------------------------------------------------

  def cleanup( s ):
    del s.mem.mem[:]

  #-----------------------------------------------------------------------
  # line trace
  #-----------------------------------------------------------------------

  def line_trace( s ):

    imem_reqstr = "  "
    if s.mem.ifc[0].reqstream.val and s.mem.ifc[0].reqstream.rdy:
      imem_reqstr = MemMsgType.str[int(s.mem.ifc[0].reqstream.msg.type_)]

    imem_respstr = "  "
    if s.mem.ifc[0].respstream.val and s.mem.ifc[0].respstream.rdy:
      imem_respstr = MemMsgType.str[int(s.mem.ifc[0].respstream.msg.type_)]

    imem_str = "     "
    if imem_reqstr != "  " or imem_respstr != "  ":
      imem_str = f"{imem_reqstr}>{imem_respstr}"

    dmem_reqstr = "  "
    if s.mem.ifc[1].reqstream.val and s.mem.ifc[1].reqstream.rdy:
      dmem_reqstr = MemMsgType.str[int(s.mem.ifc[1].reqstream.msg.type_)]

    dmem_respstr = "  "
    if s.mem.ifc[1].respstream.val and s.mem.ifc[1].respstream.rdy:
      dmem_respstr = MemMsgType.str[int(s.mem.ifc[1].respstream.msg.type_)]

    dmem_str = "     "
    if dmem_reqstr != "  " or dmem_respstr != "  ":
      dmem_str = f"{dmem_reqstr}>{dmem_respstr}"

    xmem_reqstr = "  "
    if s.mem.ifc[2].reqstream.val and s.mem.ifc[2].reqstream.rdy:
      xmem_reqstr = MemMsgType.str[int(s.mem.ifc[2].reqstream.msg.type_)]

    xmem_respstr = "  "
    if s.mem.ifc[2].respstream.val and s.mem.ifc[2].respstream.rdy:
      xmem_respstr = MemMsgType.str[int(s.mem.ifc[2].respstream.msg.type_)]

    xmem_str = "     "
    if xmem_reqstr != "  " or xmem_respstr != "  ":
      xmem_str = f"{xmem_reqstr}>{xmem_respstr}"

    mem_str = f"{imem_str}|{dmem_str}|{xmem_str}"

    return ("*" if s.sys.stats_en else " ") + \
           s.sys.line_trace() + " " + \
           mem_str

#=========================================================================
# Main
#=========================================================================

def main():

  # Parse commandline, opts are the options for the simulator, while
  # prog_argv are the arguments for the simulated program

  opts,prog_argv = parse_cmdline()

  # Open elf binary

  mem_image = None
  with open(opts.elf_file,'rb') as file_obj:
    mem_image = elf_reader( file_obj )

  # Create test harness

  ProcType = ProcFL
  if opts.proc_impl == "rtl":
    ProcType = Proc

  XcelType = NullXcelFL
  if   opts.xcel_impl == "null-rtl"  : XcelType = NullXcel
  elif opts.xcel_impl == "accum-fl"  : XcelType = AccumXcelFL
  elif opts.xcel_impl == "accum-rtl" : XcelType = AccumXcel
  elif opts.xcel_impl == "vvadd-fl"  : XcelType = VvaddXcelFL
  elif opts.xcel_impl == "vvadd-rtl" : XcelType = VvaddXcel
  elif opts.xcel_impl == "sort-fl"   : XcelType = SortXcelFL
  elif opts.xcel_impl == "sort-rtl"  : XcelType = SortXcel

  th = TestHarness( ProcXcel( ProcType, XcelType ) )

  th.elaborate()

  # Set an explicit module name for translation

  th.sys.set_metadata( VerilogTranslationPass.explicit_module_name,
                       f"ProcXcel_{opts.xcel_impl.replace('-','_')}" )

  # Check if translation is valid

  if opts.translate:
    if    not opts.proc_impl == "rtl"  \
       or not opts.xcel_impl.endswith("rtl"):

      print("\n ERROR: --translate only works with RTL models \n")
      exit(1)

  if opts.dump_vtb:
    if not opts.translate:
      print("\n ERROR: --dump-vtb needs --translate \n")
      exit(1)

  # Create VCD filename

  unique_name = ""
  if opts.dump_vcd or opts.dump_vtb:
    elf_file_basename = os.path.basename( opts.elf_file )
    unique_name = f"pmx-sim-{opts.xcel_impl}-{elf_file_basename}"

  cmdline_opts = {
    'dump_vcd': f"{unique_name}" if opts.dump_vcd else '',
    'dump_vtb': f"{unique_name}" if opts.dump_vtb else '',
    'test_verilog': 'zeros' if opts.translate else '',
  }

  # Mark saif roi signal

  th.set_metadata( VerilogTBGenPass.saif_roi_signal, "stats_en" )

  # Configure the test harness component

  config_model_with_cmdline_opts( th, cmdline_opts, duts=['sys'] )

  # Apply necessary passes

  th.apply( DefaultPassGroup( linetrace=opts.trace ) )

  # Load the program into the model

  th.load( mem_image )

  # Load the arguments

  prog_argv_addr_data = convert_prog_argv(prog_argv)

  for addr,data in prog_argv_addr_data:
    th.mem.write_mem( addr, struct.pack('i',data.uint()) )

  # Stats

  num_cycles        = 0
  num_commit_inst   = 0

  # Storage for print

  wprint      = False
  wprint_type = None  # 0: int, 1: char, 2: string

  # Reset test harness

  if opts.trace:
    print()
  th.sim_reset()

  # We are always ready to accept a proc2mngr message

  th.proc2mngr.rdy @= 1

  # Run the simulation

  while th.sim_cycle_count() < opts.max_cycles:

    # Update cycle count

    if th.stats_en:
      num_cycles += 1

      if th.commit_inst:
        num_commit_inst   += 1

    # Check the proc2mngr interface

    if th.proc2mngr.val:

      msg_type = th.proc2mngr.msg[16:32]
      msg_xtra = th.proc2mngr.msg[ 0:16]

      # Check if we are doing a wprint

      if wprint:

        # Print int

        if wprint_type == 0:
          print( th.proc2mngr.msg[:].uint(), end='' )
          wprint = False

        # Print character

        if wprint_type == 1:
          print( chr(th.proc2mngr.msg[:].uint()), end='' )
          if chr(th.proc2mngr.msg[:].uint()) == '\n':
            sys.stdout.flush()
          wprint = False

        # Print string

        if wprint_type == 2:
          char_as_num = th.proc2mngr.msg[:].uint()
          if char_as_num > 0:
            print( chr(char_as_num), end='' )
          else:
            wprint = False

      # exit message

      elif msg_type == 1:
        if opts.trace:
          th.print_line_trace()
        if ( msg_xtra.uint() != 0 ):
          exit( msg_xtra.uint() )
        else:
          break

      # wprint message

      elif msg_type == 3:

        if msg_xtra == 3:
          sys.stdout.flush()
        else:
          wprint = True
          wprint_type = msg_xtra

        if wprint_type not in [0,1,2,3]:
          if opts.trace:
            th.print_line_trace()
          print("ERROR: received unrecognized app print type!")
          exit(1)

    # Tick the simulator

    th.sim_tick()

  # Force a test failure if we timed out

  if th.sim_cycle_count() >= opts.max_cycles:
    print(f"""
   ERROR: Exceeded maximum number of cycles ({opts.max_cycles}). Your
   application might be in an infinite loop, or you need to use the
   --max-cycles command line option to increase the limit.
    """)
    exit(1)

  # Extra ticks to make VCD easier to read

  if opts.trace:
    th.print_line_trace()
  th.sim_tick()
  th.sim_tick()
  th.sim_tick()

  # Stats

  if opts.stats:
    if num_commit_inst == 0:
      print("""
    ERROR: stats were never enabled in the program. You need to
    use ece6745_stats_on() and ece6745_stats_off()
     """)
    else:

      cpi = 0.0
      if num_commit_inst > 0:
        cpi = float(num_cycles) / float(num_commit_inst)

      print()
      print( f" num_cycles        = {num_cycles}" )
      print( f" num_inst          = {num_commit_inst}" )
      print( f" CPI               = {cpi:1.2f}" )
      print()

main()


#=========================================================================
# Toplevel Makefile for the Modular C++ Build System
#=========================================================================
# Please read the documenation in 'mcppbs-doc.txt' for more details on
# how the Modular C++ Build System works. For most projects, a developer
# will not need to make any changes to this makefile. The key targets
# are as follows:
#
#  - default   : build all libraries and programs
#  - check     : build and run all unit tests
#  - clean     : remove all generated content (except autoconf files)
#

#-------------------------------------------------------------------------
# Basic setup
#-------------------------------------------------------------------------

# Remove all default implicit rules since they can cause subtle bugs
# and they just make things run slower
.SUFFIXES:
% : %,v
% : RCS/%,v
% : RCS/%
% : s.%
% : SCCS/s.%

# Default is to build the prereqs of the all target (defined at bottom)
default : all
.PHONY : default

src_dir      := @srcdir@
scripts_dir  := $(src_dir)/scripts

#-------------------------------------------------------------------------
# Programs and flags
#-------------------------------------------------------------------------

# Standard flags
#  - CPPFLAGS : flags for the preprocessor (eg. -I,-D)
#  - CFLAGS   : flags for C compiler (eg. -Wall,-g,-O3)
#  - LDFLAGS  : flags for the linker (eg. -L)

CPPFLAGS    := @CPPFLAGS@
CFLAGS      := @CFLAGS@
LDFLAGS     := @LDFLAGS@

# C compiler and linker

CC          := @CC@
COMPILE_C   := $(CC) $(CFLAGS) -MMD -MP -I. $(CPPFLAGS)
LD_C        := $(CC)
LINK_C      := $(LD_C) -L. $(LDFLAGS)

# Library creation

AR          := @AR@
RANLIB      := @RANLIB@

# Cross-compile?

riscv_crosscompile := @riscv_crosscompile@

# ISA simulator

ifeq ($(riscv_crosscompile),yes)
RUN := ../../sim/pmx/pmx-sim
RUNFLAGS :=
else
RUN :=
RUNFLAGS :=
endif

#-------------------------------------------------------------------------
# Setup subproject lists and include makefile fragments
#-------------------------------------------------------------------------

sprojs_internal    := @mcppbs_include_internal@
sprojs_internal_en := @mcppbs_include_internal_en@

sprojs_mk := $(addsuffix .mk, $(sprojs_internal_en))

-include $(sprojs_mk)
VPATH := $(addprefix $(src_dir)/, $(sprojs_internal_en))

#-------------------------------------------------------------------------
# Template for per subproject rules
#-------------------------------------------------------------------------
# The template is instantiated for each of the subprojects. It relies on
# subprojects defining a certain set of make variables which are all
# prefixed with the subproject name. Since subproject names can have
# dashes in them (and the make variables are assumed to only use
# underscores) the template takes two arguments - one with the regular
# subproject name and one with dashes replaced with underscores.
#
# Arguments:
#  $(1) : real subproject name (ie with dashes)
#  $(2) : normalized subproject name (ie dashes replaced with underscores)
#

define subproject_template

# In some (rare) cases, a subproject might not have any actual object
# files. It might only include header files or program sources. To keep
# things consistent we still want a library for this subproject, so in
# this spectial case we create a dummy source file and thus the build
# system will create a library for this subproject with just the
# corresponding dummy object file.

ifeq ($$(strip $$($(2)_srcs)),)
$(2)_srcs += $(1)_.cc
$(2)_junk += $(1)_.cc
endif

$(1)_.cc :
	echo "int $(2)_( int arg ) { return arg; }" > $$@

# Build the object files from assembly sources for this subproject

$(2)_asm_srcs := $$(filter %.S, $$($(2)_srcs))
$(2)_asm_objs := $$(patsubst %.S, %.o, $$($(2)_asm_srcs))
$(2)_asm_deps := $$(patsubst %.S, %.d, $$($(2)_asm_srcs))

$$($(2)_asm_objs) : %.o : %.S
	$(COMPILE_C) $$($(2)_cppflags) -c $$<

$(2)_objs += $$($(2)_asm_objs)
$(2)_deps += $$($(2)_asm_deps)
$(2)_junk += $$($(2)_asm_deps) $$($(2)_asm_objs)

# Build the object files from C sources for this subproject

$(2)_c_srcs := $$(filter %.c, $$($(2)_srcs))
$(2)_c_objs := $$(patsubst %.c, %.o, $$($(2)_c_srcs))
$(2)_c_deps := $$(patsubst %.c, %.d, $$($(2)_c_srcs))

$$($(2)_c_objs) : %.o : %.c
	$(COMPILE_C) $$($(2)_cppflags) -c $$<

$(2)_objs += $$($(2)_c_objs)
$(2)_deps += $$($(2)_c_deps)
$(2)_junk += $$($(2)_c_deps) $$($(2)_c_objs)

# Build a library for this subproject

$(2)_libname = lib$(1).a
$$($(2)_libname) : $$($(2)_objs)
	$(AR) rcv $$@ $$^
	$(RANLIB) $$@

$(2)_junk += $$($(2)_libname)

# Use the list of internal subprojects which this subproject depends on
# to create a list of prerequisite libraries (including this
# subproject's library).

$(2)_intdeps_libnames := $$(patsubst %, lib%.a, $$($(2)_intdeps))
$(2)_link_prereqs     := $$($(2)_libname) $$($(2)_intdeps_libnames)

# Build unit tests

$(2)_test_objs := $$(patsubst %.c, %.o,   $$($(2)_test_srcs))
$(2)_test_deps := $$(patsubst %.c, %.d,   $$($(2)_test_srcs))
$(2)_test_exes := $$(patsubst %.c, %,     $$($(2)_test_srcs))
$(2)_test_outs := $$(patsubst %,   %.out, $$($(2)_test_exes))

$$($(2)_test_objs) : %.o : %.c
	$(COMPILE_C) $$($(2)_cppflags) -c $$<

$$($(2)_test_exes) : % : %.o $$($(2)_link_prereqs)
	$(LINK_C) $$($(2)_ldflags) -o $$@ $$< $$($(2)_libs)

$(2)_deps += $$($(2)_test_deps)
$(2)_junk += \
  $$($(2)_test_deps) $$($(2)_test_objs) $$($(2)_test_exes)

# Build C programs

$(2)_prog_objs := $$(patsubst %.c, %.o, $$($(2)_prog_srcs))
$(2)_prog_deps := $$(patsubst %.c, %.d, $$($(2)_prog_srcs))
$(2)_prog_exes := $$(patsubst %.c, %,   $$($(2)_prog_srcs))

$$($(2)_prog_objs) : %.o : %.c
	$(COMPILE_C) $$($(2)_cppflags) -c $$<

$$($(2)_prog_exes) : % : %.o $$($(2)_link_prereqs)
	$(LINK_C) $$($(2)_ldflags) -o $$@ $$< $$($(2)_libs)

$(2)_exes += $$($(2)_prog_exes)
$(2)_deps += $$($(2)_prog_deps)
$(2)_junk += \
  $$($(2)_prog_objs) $$($(2)_prog_deps) $$($(2)_prog_exes)

# Run tests

$(2)_test_outs := $$(patsubst %, %.out, $$($(2)_test_exes))

$$($(2)_test_outs) : %.out : %
	$(RUN) $(RUNFLAGS) ./$$< 2>&1 | tee $$@

$(2)_junk += $$($(2)_test_outs)

# Other subproject specific targets

all-$(1) : $$($(2)_libname) $$($(2)_prog_exes)

check-$(1) : $$($(2)_test_outs)
	echo; sed '/^$$$$/d' $$^; echo
	! grep -q "F" $$^

clean-$(1) :
	rm -rf $$($(2)_junk)

.PHONY : all-$(1) check-$(1) clean-$(1)

# Update running variables

libs += $$($(2)_libname)
objs += $$($(2)_objs)
exes += $$($(2)_exes)
outs += $$($(2)_test_outs)
junk += $$($(2)_junk)
deps += $$($(2)_deps)

endef

# Call template for each enabled internal subproject

$(foreach sproj,$(sprojs_internal_en), \
  $(eval $(call subproject_template,$(sproj),$(subst -,_,$(sproj)))))

#-------------------------------------------------------------------------
# Autodependency files
#-------------------------------------------------------------------------

-include $(deps)

deps : $(deps)
.PHONY : deps

#-------------------------------------------------------------------------
# Check
#-------------------------------------------------------------------------
# We use the grep to make the exit status fail if we find a F
# indicating a failing test case

check : $(outs)
	echo; sed "/^$$/d" $^; echo
	! grep -q "F" $^

.PHONY : check

#-------------------------------------------------------------------------
# Regenerate configure information
#-------------------------------------------------------------------------

configure_prereq = \
  $(src_dir)/configure.ac \
  $(src_dir)/aclocal.m4 \
  $(join $(addprefix $(src_dir)/, $(sprojs_internal_en)), \
         $(patsubst  %, /%.ac, $(sprojs_internal_en)))

$(src_dir)/configure : $(configure_prereq)
	cd $(src_dir) && autoconf && autoheader

config.status : $(src_dir)/configure
	./config.status --recheck

makefile_prereq = \
  config.status \
  $(src_dir)/Makefile.in \
  $(join $(addprefix $(src_dir)/, $(sprojs_internal_en)), \
         $(patsubst  %, /%.mk.in, $(sprojs_internal_en))) \

Makefile : $(makefile_prereq)
	./config.status

#-------------------------------------------------------------------------
# Default
#-------------------------------------------------------------------------

all : $(libs) $(exes) $(vmhs)
.PHONY : all

#-------------------------------------------------------------------------
# Makefile debugging
#-------------------------------------------------------------------------
# This handy rule will display the contents of any make variable by
# using the target debug-<varname>. So for example, make debug-junk will
# display the contents of the junk variable.

debug-% :
	@echo $* = $($*)

#-------------------------------------------------------------------------
# Clean up junk
#-------------------------------------------------------------------------

clean :
	rm -rf *~ \#* $(junk)

distclean :
	rm -rf *~ \#* $(junk)

.PHONY : clean
